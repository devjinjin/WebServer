@page "/place"

@using WebServer.Models.Places
@using WebServer.Service.Places
@inject IJSRuntime JsRuntime
@implements IDisposable


@if (places.Count > 0)
{

    @foreach (var note in places)
    {
        <section class="hero">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 offset-lg-3">
                        <div class="cardbox shadow-lg bg-white">

                            <div class="cardbox-heading">
                                <!-- START dropdown-->
                                <div class="dropdown float-right">
                                    <button class="btn btn-flat btn-flat-icon" type="button" data-toggle="dropdown" aria-expanded="false">
                                        <em class="fa fa-ellipsis-h"></em>
                                    </button>
                                    <div class="dropdown-menu dropdown-scale dropdown-menu-right" role="menu" style="position: absolute; transform: translate3d(-136px, 28px, 0px); top: 0px; left: 0px; will-change: transform;">
                                        <a class="dropdown-item" href="#">Hide post</a>
                                        <a class="dropdown-item" href="#">Stop following</a>
                                        <a class="dropdown-item" href="#">Report</a>
                                    </div>
                                </div><!--/ dropdown -->
                                <div class="media m-0">
                                    <div class="d-flex mr-3">
                                        <a href=""><img class="img-fluid rounded-circle" src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/4.jpg" alt="User"></a>
                                    </div>
                                    <div class="media-body">
                                        <p class="m-0">@note.Title</p>
                                        <small><span><i class="icon ion-md-pin"></i> @note.Title</span></small>
                                        <small><span><i class="icon ion-md-time"></i>@note.Created</span></small>
                                        <small><span><i class="icon ion-md-time"></i> 10 hours ago</span></small>
                                    </div>
                                </div><!--/ media -->
                            </div><!--/ cardbox-heading -->

                            <div class="cardbox-item">
                                <img class="img-fluid" src="/Temp/Product/@note.MainImage" style="width: 100%; height: auto;" alt="Image">
                            </div><!--/ cardbox-item -->
                            <div class="cardbox-base">
                                <ul class="float-right">
                                    <li><a><i class="fa fa-comments"></i></a></li>
                                    <li><a><em class="mr-5">12</em></a></li>
                                    <li><a><i class="fa fa-share-alt"></i></a></li>
                                    <li><a><em class="mr-3">03</em></a></li>
                                </ul>
                                <ul>
                                    <li><a><i class="fa fa-thumbs-up"></i></a></li>
                                    <li><a href="#"><img src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/3.jpeg" class="img-fluid rounded-circle" alt="User"></a></li>
                                    <li><a href="#"><img src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/1.jpg" class="img-fluid rounded-circle" alt="User"></a></li>
                                    <li><a href="#"><img src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/5.jpg" class="img-fluid rounded-circle" alt="User"></a></li>
                                    <li><a href="#"><img src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/2.jpg" class="img-fluid rounded-circle" alt="User"></a></li>
                                    <li><a><span>242 Likes</span></a></li>
                                </ul>
                            </div><!--/ cardbox-base -->
                            <div class="cardbox-comments">
                                <span class="comment-avatar float-left">
                                    <a href=""><img class="rounded-circle" src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/6.jpg" alt="..."></a>
                                </span>
                                <div class="search">
                                    <input placeholder="Write a comment" type="text">
                                    <button><i class="fa fa-camera"></i></button>
                                </div><!--/. Search -->
                            </div><!--/ cardbox-like -->

                        </div><!--/ cardbox -->
                    </div><!--/ col-lg-6 -->
                </div><!--/ row -->
            </div><!--/ container -->
        </section>
    }

    @if (StopLoading)
    {
        <div>
            <h4>End Of List</h4>
        </div>
    }
}
else
{
    <section style="clear:both;">
        <div class="container">
            <div class="row">
                <div class="col-sm-12 text-center jumbotron">
                    @if (places.Count == 0)
                    {
                        <p>데이터가 없습니다.</p>
                    }
                </div>
            </div>
        </div>
    </section>
}




<div id="list-end" class="mt-5 mb-5 p-5">
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
</div>


@code{
    public List<PlaceInfo> places { get; set; } = new List<PlaceInfo>();

    private PlaceParameters Parameters = new PlaceParameters();

    [Inject]
    public IPlaceHttpRepository Repository { get; set; }

    bool IsLoading { get; set; } = false;


    bool StopLoading = false;

    int pageNumber = 1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMore();
            await InitJsListenerAsync();
        }
    }

    protected async Task InitJsListenerAsync()
    {
        await JsRuntime.InvokeVoidAsync("ScrollList.Init", "list-end", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task LoadMore()
    {
        if (!IsLoading)
        {
            IsLoading = true;

            StateHasChanged();

            await Task.Delay(500);
            Parameters.PageNumber = pageNumber;
            var pagingResponse = await Repository.GetItems(Parameters);

            if (pagingResponse.Items.Count > 0)
            {
                places.AddRange(pagingResponse.Items);
                pageNumber++;
            }
            else
            {
                StopLoading = true;
            }


            IsLoading = false;

            StateHasChanged();


            //at the end of pages or results stop loading anymore
            if (StopLoading)
            {
                await StopListener();
            }
        }
    }

    public async Task StopListener()
    {

        IsLoading = false;
        if (places.Count > 0) {

            await JsRuntime.InvokeVoidAsync("ScrollList.RemoveListener");
        }
        StateHasChanged();
    }


    public void Dispose()
    {
        JsRuntime.InvokeVoidAsync("ScrollList.RemoveListener");
    }
}
